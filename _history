{"entries":[{"timestamp":1738944244614,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \"*\",\n"],[1,"        \"radio\": \"*\",\n"],[0,"        "]],"start1":86,"start2":86,"length1":16,"length2":38},{"diffs":[[0,"   \""],[-1,"RX8900.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts"],[1,"main.ts\",\n        \"README.md"],[0,"\"\n  "]],"start1":169,"start2":169,"length1":61,"length2":36},{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":278,"start2":278,"length1":11,"length2":42}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"},{"type":"added","filename":"RX8900.ts","value":"/**\n * makecode RTC(DS3231) Package.\n */\nenum clockData {\n    // % block=\"年\"\n    year = 0,    // 1970～2069\n    // % block=\"月\"\n    month = 1,\n    // % block=\"日\"\n    day = 2,\n    // % block=\"曜日\"\n    weekday = 3,  // 0:日曜日～6:土曜日\n    // % block=\"時\"\n    hour = 4,\n    // % block=\"分\"\n    minute = 5,\n    // % block=\"秒\"\n    second = 6,\n    // % block=\"UNIX TIME\"\n    unix = 7\n}\n\n/**\n * RTC block\n */\n//% weight=10 color=#800080 icon=\"\\uf017\" block=\"DS3231\"\nnamespace rtc {\n\n    let I2C_ADDR = 0x68;\n    let REG_CTRL = 0x0e;\n    let REG_SECOND = 0x00;\n    let REG_ALARM1S = 0x07;\n    let REG_ALARM2M = 0x0b;\n    let REG_STATUS = 0x0f;\n    let dateTime = [0, 0, 0, 0, 0, 0, 0];     // year,month,day,weekday,hour,minute,second\n    let initFlag = 0;\n    /**\n     * set reg\n     */\n    function setReg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(I2C_ADDR, buf);\n    }\n\n    /**\n     * get reg\n     */\n    function getReg(reg: number): number {\n        pins.i2cWriteNumber(I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(I2C_ADDR, NumberFormat.UInt8BE);\n    }\n\n    /**\n     * convert a BCD data to Dec\n     */\n    function HexToDec(dat: number): number {\n        return (dat >> 4) * 10 + (dat & 0x0f);\n    }\n\n    /**\n     * convert a Dec data to BCD\n     */\n    function DecToHex(dat: number): number {\n        return Math.trunc(dat / 10) << 4 | (dat % 10)\n    }\n\n    /**\n     * init device\n     */\n    //% blockId=\"initDevice\" block=\"init device\"\n    export function initDevice(): void {\n\n        if (initFlag == 0) {\n            setReg(REG_CTRL, 0x04)\n            initFlag = 1;\n        }\n    }\n    /**\n     * set clock\n     */\n    //% blockId=\"setClock\" block=\"set clock\"\n    export function setClock(): void {\n\n        let buf = pins.createBuffer(8);\n\n        buf[0] = REG_SECOND;\n        buf[1] = DecToHex(dateTime[clockData.second]);\n        buf[2] = DecToHex(dateTime[clockData.minute]);\n        buf[3] = DecToHex(dateTime[clockData.hour]);\n        buf[4] = DecToHex(getWeekday(convDateTime(\n            dateTime[clockData.year],\n            dateTime[clockData.month],\n            dateTime[clockData.day],\n            dateTime[clockData.hour],\n            dateTime[clockData.minute],\n            dateTime[clockData.second]\n        )) + 1);\n        buf[5] = DecToHex(dateTime[clockData.day]);\n        buf[6] = DecToHex(dateTime[clockData.month]);\n        buf[7] = DecToHex(dateTime[clockData.year] % 100);\n\n        pins.i2cWriteBuffer(I2C_ADDR, buf)\n    }\n    /**\n     * get clock\n     */\n    //% blockId=\"getClock\" block=\"get clock\"\n    export function getClock(): void {\n\n        pins.i2cWriteNumber(I2C_ADDR, REG_SECOND, NumberFormat.UInt8BE);\n        let buf = pins.i2cReadBuffer(I2C_ADDR, 8);\n\n        if (HexToDec(buf[6]) < 70) {\n            dateTime[clockData.year] = HexToDec(buf[6]) + 2000;\n        } else {\n            dateTime[clockData.year] = HexToDec(buf[6]) + 1900;\n        }      // year\n        dateTime[clockData.month] = HexToDec(buf[5] & 0x1f)    \t// month\n        dateTime[clockData.day] = HexToDec(buf[4] & 0x3f)       // day\n        dateTime[clockData.weekday] = HexToDec(buf[3] & 0x07) - 1;\t// weekday\n        dateTime[clockData.hour] = HexToDec(buf[2] & 0x3f)     \t// hour\n        dateTime[clockData.minute] = HexToDec(buf[1] & 0x7f)   \t// minute\n        dateTime[clockData.second] = HexToDec(buf[0] & 0x7f)   \t// second\n    }\n    /**\n     * setAlarm\n     * @param n alarm number\n     * @param h hour\n     * @param m minute\n     */\n    //% blockId=\"setAlarm\" block=\"set alarm#%n to %h:%m\"\n    export function setAlarm(n: number, h: number, m: number): void {\n        if (n == 1) {\n            let buf = pins.createBuffer(5);\n\n            buf[0] = REG_ALARM1S;\n            buf[1] = 0;\n            buf[2] = DecToHex(m);\n            buf[3] = DecToHex(h);\n            buf[4] = 0x80;\n\n            pins.i2cWriteBuffer(I2C_ADDR, buf);\n\n            setReg(REG_CTRL, getReg(REG_CTRL) | 0x01);\n        } else {\n            let buf = pins.createBuffer(4);\n\n            buf[0] = REG_ALARM2M;\n            buf[1] = DecToHex(m);\n            buf[2] = DecToHex(h);\n            buf[3] = 0x80;\n\n            pins.i2cWriteBuffer(I2C_ADDR, buf);\n\n            setReg(REG_CTRL, getReg(REG_CTRL) | 0x02);\n        }\n    }\n    /**\n     * resetAlarm\n     * @param n alarm number\n     */\n    //% blockId=\"resetAlarm\" block=\"reset alarm#%n\"\n    export function resetAlarm(n: number): void {\n        if (n == 1) {\n            setReg(REG_STATUS, getReg(REG_STATUS) & 0xfe);\n            setReg(REG_CTRL, getReg(REG_CTRL) & 0xfe);\n        } else {\n            setReg(REG_STATUS, getReg(REG_STATUS) & 0xfd);\n            setReg(REG_CTRL, getReg(REG_CTRL) & 0xfd);\n        }\n    }\n    /**\n     * checkAlarm\n     * @param n alarm number\n     */\n    //% blockId=\"checkAlarm\" block=\"check alarm#%n\"\n    export function checkAlarm(n: number): boolean {\n        let ct = getReg(REG_STATUS);\n        if (n == 1) {\n            if ((ct & 0x01) == 0x01) return true;\n            else return false;\n        } else {\n            if ((ct & 0x02) == 0x02) return true;\n            else return false;\n        }\n    }\n    /**\n     * setClockData\n     * @param dt clockData\n     * @param n data, eg:8\n     */\n    //% blockId=\"setClockData\" block=\"set %clockData to %n\"\n    export function setClockData(dt: clockData, n: number): void {\n        if (dt != clockData.unix) dateTime[dt] = n;\n        else {\n            dateTime[clockData.year] = getYear(n);\n            dateTime[clockData.month] = getMonth(n);\n            dateTime[clockData.day] = getDay(n);\n            dateTime[clockData.weekday] = getWeekday(n);\n            dateTime[clockData.hour] = getHour(n);\n            dateTime[clockData.minute] = getMinute(n);\n            dateTime[clockData.second] = getSecond(n);\n        }\n    }\n\n    /**\n     * getClockData\n     * @param dt clockData\n     */\n    //% blockId=\"getClockData\" block=\"%clockData\"\n    export function getClockData(dt: clockData): number {\n        if (dt != clockData.unix) return dateTime[dt];\n        else {\n            return convDateTime(dateTime[clockData.year],\n                dateTime[clockData.month],\n                dateTime[clockData.day],\n                dateTime[clockData.hour],\n                dateTime[clockData.minute],\n                dateTime[clockData.second]\n            );\n        }\n    }\n    let wYear: number;\n    let wDays: number;\n    let leapYear: number;\n    function getHour(DateTime: number): number {\n        return Math.trunc(DateTime / 3600) % 24\n    }\n    function getMinute(DateTime: number): number {\n        return Math.trunc(DateTime / 60) % 60\n    }\n    function getSecond(DateTime: number): number {\n        return DateTime % 60\n    }\n    function getDays(DateTime: number): number {\n        return Math.trunc(DateTime / 86400)\n    }\n    function getYear(Datetime: number): number {\n        wYear = Math.trunc((getDays(Datetime) + 0.5) / 365.25)\n        return wYear + 1970\n    }\n    function getMonth(Datetime: number): number {\n        wYear = getYear(Datetime)\n        wDays = getDays(Datetime) - ((wYear - 1970) * 365 + Math.ceil((wYear - 1972) / 4))\n        if (wYear % 4 == 0) {\n            leapYear = 1\n        } else {\n            leapYear = 0\n        }\n        if (wDays > 333 + leapYear) {\n            return 12\n        } else if (wDays > 303 + leapYear) {\n            return 11\n        } else if (wDays > 272 + leapYear) {\n            return 10\n        } else if (wDays > 242 + leapYear) {\n            return 9\n        } else if (wDays > 211 + leapYear) {\n            return 8\n        } else if (wDays > 180 + leapYear) {\n            return 7\n        } else if (wDays > 150 + leapYear) {\n            return 6\n        } else if (wDays > 119 + leapYear) {\n            return 5\n        } else if (wDays > 89 + leapYear) {\n            return 4\n        } else if (wDays > 58 + leapYear) {\n            return 3\n        } else if (wDays > 30 + 0) {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    function getDay(Datetime: number): number {\n        wYear = getYear(Datetime)\n        wDays = getDays(Datetime) - ((wYear - 1970) * 365 + Math.ceil((wYear - 1972) / 4))\n        if (wYear % 4 == 0) {\n            leapYear = 1\n        } else {\n            leapYear = 0\n        }\n        if (wDays > 333 + leapYear) {\n            return wDays - (333 + leapYear)\n        } else if (wDays > 303 + leapYear) {\n            return wDays - (303 + leapYear)\n        } else if (wDays > 272 + leapYear) {\n            return wDays - (272 + leapYear)\n        } else if (wDays > 242 + leapYear) {\n            return wDays - (242 + leapYear)\n        } else if (wDays > 211 + leapYear) {\n            return wDays - (211 + leapYear)\n        } else if (wDays > 180 + leapYear) {\n            return wDays - (180 + leapYear)\n        } else if (wDays > 150 + leapYear) {\n            return wDays - (150 + leapYear)\n        } else if (wDays > 119 + leapYear) {\n            return wDays - (119 + leapYear)\n        } else if (wDays > 89 + leapYear) {\n            return wDays - (89 + leapYear)\n        } else if (wDays > 58 + leapYear) {\n            return wDays - (58 + leapYear)\n        } else if (wDays > 30 + 0) {\n            return wDays - (30 + 0)\n        } else {\n            return wDays + 1\n        }\n    }\n    function getWeekday(DateTime: number): number {\n        return (getDays(DateTime) + 4) % 7\n    }\n    function convDateTime(year: number, month: number, day: number, hour: number, minute: number, second: number): number {\n        if (year < 100) wYear = (2000 + year) - 1970; else wYear = year - 1970;\n        if (year % 4 == 0) {\n            leapYear = 1\n        } else {\n            leapYear = 0\n        }\n        wDays = wYear * 365 + Math.ceil((wYear - 2) / 4)\n        if (month == 1) {\n            wDays += day - 1\n        } else if (month == 2) {\n            wDays += day + 30 + 0\n        } else if (month == 3) {\n            wDays += day + 58 + leapYear\n        } else if (month == 4) {\n            wDays += day + 89 + leapYear\n        } else if (month == 5) {\n            wDays += day + 119 + leapYear\n        } else if (month == 6) {\n            wDays += day + 150 + leapYear\n        } else if (month == 7) {\n            wDays += day + 180 + leapYear\n        } else if (month == 8) {\n            wDays += day + 211 + leapYear\n        } else if (month == 9) {\n            wDays += day + 242 + leapYear\n        } else if (month == 10) {\n            wDays += day + 272 + leapYear\n        } else if (month == 11) {\n            wDays += day + 303 + leapYear\n        } else if (month == 12) {\n            wDays += day + 333 + leapYear\n        }\n        return ((wDays * 24 + hour) * 60 + minute) * 60 + second\n    }\n}\n"}]}],"snapshots":[{"timestamp":1738944244613,"editorVersion":"7.0.57","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-rx8900\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1738944475518}